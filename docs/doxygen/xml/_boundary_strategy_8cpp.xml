<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="_boundary_strategy_8cpp" kind="file" language="C++">
    <compoundname>BoundaryStrategy.cpp</compoundname>
    <includes local="no">cmath</includes>
    <includes refid="_boundary_strategy_8h" local="yes">BoundaryStrategy.h</includes>
    <incdepgraph>
      <node id="3">
        <label>BoundaryStrategy.h</label>
        <link refid="_boundary_strategy_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Point.h</label>
        <link refid="_point_8h"/>
      </node>
      <node id="1">
        <label>C:/Users/biol0117/OneDrive - Nexus365/Documents/Programming projects/C++ Model/GeneralMetapop/src/BoundaryStrategy.cpp</label>
        <link refid="_boundary_strategy_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>cmath</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_boundary_strategy_8h" kindref="compound">BoundaryStrategy.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_toroidal_boundary_strategy_1a262f8bca65f10efa4e88c1aa67ac41ee" kindref="member">ToroidalBoundaryStrategy::distance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_point" kindref="compound">Point</ref><sp/>&amp;p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_point" kindref="compound">Point</ref><sp/>&amp;p2)</highlight></codeline>
<codeline lineno="11"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x_dist<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y_dist<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::abs(p1.<ref refid="struct_point_1ab99c56589bc8ad5fa5071387110a5bc7" kindref="member">x</ref><sp/>-<sp/>p2.<ref refid="struct_point_1ab99c56589bc8ad5fa5071387110a5bc7" kindref="member">x</ref>)<sp/>&gt;<sp/><ref refid="class_boundary_strategy_1a8b9e897d2396509ec12f4d797e3101f1" kindref="member">side</ref><sp/>-<sp/>std::abs(p1.<ref refid="struct_point_1ab99c56589bc8ad5fa5071387110a5bc7" kindref="member">x</ref><sp/>-<sp/>p2.<ref refid="struct_point_1ab99c56589bc8ad5fa5071387110a5bc7" kindref="member">x</ref>))<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x_dist<sp/>=<sp/><ref refid="class_boundary_strategy_1a8b9e897d2396509ec12f4d797e3101f1" kindref="member">side</ref><sp/>-<sp/>std::abs(p1.<ref refid="struct_point_1ab99c56589bc8ad5fa5071387110a5bc7" kindref="member">x</ref><sp/>-<sp/>p2.<ref refid="struct_point_1ab99c56589bc8ad5fa5071387110a5bc7" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x_dist<sp/>=<sp/>std::abs(p1.<ref refid="struct_point_1ab99c56589bc8ad5fa5071387110a5bc7" kindref="member">x</ref><sp/>-<sp/>p2.<ref refid="struct_point_1ab99c56589bc8ad5fa5071387110a5bc7" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::abs(p1.<ref refid="struct_point_1afa38be143ae800e6ad69ce8ed4df62d8" kindref="member">y</ref><sp/>-<sp/>p2.<ref refid="struct_point_1afa38be143ae800e6ad69ce8ed4df62d8" kindref="member">y</ref>)<sp/>&gt;<sp/><ref refid="class_boundary_strategy_1a8b9e897d2396509ec12f4d797e3101f1" kindref="member">side</ref><sp/>-<sp/>std::abs(p1.<ref refid="struct_point_1afa38be143ae800e6ad69ce8ed4df62d8" kindref="member">y</ref><sp/>-<sp/>p2.<ref refid="struct_point_1afa38be143ae800e6ad69ce8ed4df62d8" kindref="member">y</ref>))<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y_dist<sp/>=<sp/><ref refid="class_boundary_strategy_1a8b9e897d2396509ec12f4d797e3101f1" kindref="member">side</ref><sp/>-<sp/>std::abs(p1.<ref refid="struct_point_1afa38be143ae800e6ad69ce8ed4df62d8" kindref="member">y</ref><sp/>-<sp/>p2.<ref refid="struct_point_1afa38be143ae800e6ad69ce8ed4df62d8" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y_dist<sp/>=<sp/>std::abs(p1.<ref refid="struct_point_1afa38be143ae800e6ad69ce8ed4df62d8" kindref="member">y</ref><sp/>-<sp/>p2.<ref refid="struct_point_1afa38be143ae800e6ad69ce8ed4df62d8" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt((x_dist<sp/>*<sp/>x_dist)<sp/>+<sp/>(y_dist<sp/>*<sp/>y_dist));</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><ref refid="struct_point" kindref="compound">Point</ref><sp/><ref refid="class_toroidal_boundary_strategy_1a47769682a09b91733ea8295517afe245" kindref="member">ToroidalBoundaryStrategy::relative_pos</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_point" kindref="compound">Point</ref><sp/>&amp;p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_point" kindref="compound">Point</ref><sp/>&amp;p2)<sp/></highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_point" kindref="compound">Point</ref><sp/>t2=p2;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(2*(p2.<ref refid="struct_point_1ab99c56589bc8ad5fa5071387110a5bc7" kindref="member">x</ref><sp/>-<sp/>p1.<ref refid="struct_point_1ab99c56589bc8ad5fa5071387110a5bc7" kindref="member">x</ref>)<sp/>&gt;<sp/><ref refid="class_boundary_strategy_1a8b9e897d2396509ec12f4d797e3101f1" kindref="member">side</ref>)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t2.<ref refid="struct_point_1ab99c56589bc8ad5fa5071387110a5bc7" kindref="member">x</ref><sp/>=<sp/>p2.<ref refid="struct_point_1ab99c56589bc8ad5fa5071387110a5bc7" kindref="member">x</ref><sp/>-<sp/><ref refid="class_boundary_strategy_1a8b9e897d2396509ec12f4d797e3101f1" kindref="member">side</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(2*(p1.<ref refid="struct_point_1ab99c56589bc8ad5fa5071387110a5bc7" kindref="member">x</ref><sp/>-<sp/>p2.<ref refid="struct_point_1ab99c56589bc8ad5fa5071387110a5bc7" kindref="member">x</ref>)<sp/>&gt;<sp/><ref refid="class_boundary_strategy_1a8b9e897d2396509ec12f4d797e3101f1" kindref="member">side</ref>)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t2.<ref refid="struct_point_1ab99c56589bc8ad5fa5071387110a5bc7" kindref="member">x</ref><sp/>=<sp/>p2.<ref refid="struct_point_1ab99c56589bc8ad5fa5071387110a5bc7" kindref="member">x</ref><sp/>+<sp/><ref refid="class_boundary_strategy_1a8b9e897d2396509ec12f4d797e3101f1" kindref="member">side</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(2*(p2.<ref refid="struct_point_1afa38be143ae800e6ad69ce8ed4df62d8" kindref="member">y</ref><sp/>-<sp/>p1.<ref refid="struct_point_1afa38be143ae800e6ad69ce8ed4df62d8" kindref="member">y</ref>)<sp/>&gt;<sp/><ref refid="class_boundary_strategy_1a8b9e897d2396509ec12f4d797e3101f1" kindref="member">side</ref>)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t2.<ref refid="struct_point_1afa38be143ae800e6ad69ce8ed4df62d8" kindref="member">y</ref><sp/>=<sp/>p2.<ref refid="struct_point_1afa38be143ae800e6ad69ce8ed4df62d8" kindref="member">y</ref><sp/>-<sp/><ref refid="class_boundary_strategy_1a8b9e897d2396509ec12f4d797e3101f1" kindref="member">side</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(2*(p1.<ref refid="struct_point_1afa38be143ae800e6ad69ce8ed4df62d8" kindref="member">y</ref><sp/>-<sp/>p2.<ref refid="struct_point_1afa38be143ae800e6ad69ce8ed4df62d8" kindref="member">y</ref>)<sp/>&gt;<sp/><ref refid="class_boundary_strategy_1a8b9e897d2396509ec12f4d797e3101f1" kindref="member">side</ref>)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t2.<ref refid="struct_point_1afa38be143ae800e6ad69ce8ed4df62d8" kindref="member">y</ref><sp/>=<sp/>p2.<ref refid="struct_point_1afa38be143ae800e6ad69ce8ed4df62d8" kindref="member">y</ref><sp/>+<sp/><ref refid="class_boundary_strategy_1a8b9e897d2396509ec12f4d797e3101f1" kindref="member">side</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t2;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_edge_boundary_strategy_1a58bed301f6c5f63a491bad0ebe982752" kindref="member">EdgeBoundaryStrategy::distance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_point" kindref="compound">Point</ref><sp/>&amp;p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_point" kindref="compound">Point</ref><sp/>&amp;p2)</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt(std::pow(p2.<ref refid="struct_point_1ab99c56589bc8ad5fa5071387110a5bc7" kindref="member">x</ref><sp/>-<sp/>p1.<ref refid="struct_point_1ab99c56589bc8ad5fa5071387110a5bc7" kindref="member">x</ref>,<sp/>2)<sp/>+<sp/>std::pow(p2.<ref refid="struct_point_1afa38be143ae800e6ad69ce8ed4df62d8" kindref="member">y</ref><sp/>-<sp/>p1.<ref refid="struct_point_1afa38be143ae800e6ad69ce8ed4df62d8" kindref="member">y</ref>,<sp/>2));</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><ref refid="struct_point" kindref="compound">Point</ref><sp/><ref refid="class_edge_boundary_strategy_1afa01b99a109ff593117736e8722da894" kindref="member">EdgeBoundaryStrategy::relative_pos</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_point" kindref="compound">Point</ref><sp/>&amp;p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_point" kindref="compound">Point</ref><sp/>&amp;p2)<sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p2;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/biol0117/OneDrive - Nexus365/Documents/Programming projects/C++ Model/GeneralMetapop/src/BoundaryStrategy.cpp"/>
  </compounddef>
</doxygen>
