<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="random_8h" kind="file" language="C++">
    <compoundname>random.h</compoundname>
    <includes local="no">vector</includes>
    <includes local="no">array</includes>
    <includes refid="constants_8h" local="yes">constants.h</includes>
    <includedby refid="_aestivation_8cpp" local="yes">src/Aestivation.cpp</includedby>
    <includedby refid="_dispersal_8cpp" local="yes">src/Dispersal.cpp</includedby>
    <includedby refid="_g_d_release_8cpp" local="yes">src/GDRelease.cpp</includedby>
    <includedby refid="_model_8cpp" local="yes">src/Model.cpp</includedby>
    <includedby refid="_patch_8cpp" local="yes">src/Patch.cpp</includedby>
    <includedby refid="random_8cpp" local="yes">src/random.cpp</includedby>
    <incdepgraph>
      <node id="4">
        <label>constants.h</label>
        <link refid="constants_8h_source"/>
      </node>
      <node id="1">
        <label>includes/random.h</label>
        <link refid="random_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>array</label>
      </node>
      <node id="2">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="random_8h_1a108ff3fb960f77177389a96a01ed1c74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double random_real</definition>
        <argsstring>()</argsstring>
        <name>random_real</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a random floating-point number from a uniform real distribution of 0.0 to 1.0. <simplesect kind="return"><para>The random number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/random.h" line="10" column="8" bodyfile="src/random.cpp" bodystart="18" bodyend="22" declfile="includes/random.h" declline="10" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="random_8h_1af03c0e74140efa3114c4cd1361da5548" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int random_discrete</definition>
        <argsstring>(int a, int b)</argsstring>
        <name>random_discrete</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a random integer number from a uniform discrete distribution of a to b. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>lower value of the distribution range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>upper value of the distribution range </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The random number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/random.h" line="11" column="5" bodyfile="src/random.cpp" bodystart="30" bodyend="34" declfile="includes/random.h" declline="11" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="random_8h_1a2b4b3dc20892808a0220d878773ba864" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long long int</type>
        <definition>long long int random_poisson</definition>
        <argsstring>(double lambda)</argsstring>
        <name>random_poisson</name>
        <param>
          <type>double</type>
          <declname>lambda</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a random draw (non-negative integer) from the Poisson distribution with mean lambda (using normal distribution approximation when lambda &gt; 30) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lambda</parametername>
</parameternamelist>
<parameterdescription>
<para>mean of the distribution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The random number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/random.h" line="12" column="15" bodyfile="src/random.cpp" bodystart="41" bodyend="60" declfile="includes/random.h" declline="12" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="random_8h_1a4e7a8d4c70cb879b071d51ddec9a8b1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long long int</type>
        <definition>long long int random_binomial</definition>
        <argsstring>(long long int n, double p)</argsstring>
        <name>random_binomial</name>
        <param>
          <type>long long int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a random draw (non-negative integer) from the Binomial distribution B(N,p). Uses Normal and Poisson distribution approximations for large N. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of trials </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p</parametername>
</parameternamelist>
<parameterdescription>
<para>success probability </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The random number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/random.h" line="13" column="15" bodyfile="src/random.cpp" bodystart="69" bodyend="95" declfile="includes/random.h" declline="13" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="random_8h_1a180e4f01c99b4c4fae00714c08fa647b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; long long int &gt;</type>
        <definition>std::vector&lt; long long int &gt; random_multinomial</definition>
        <argsstring>(long long int n, const std::vector&lt; double &gt; &amp;probs)</argsstring>
        <name>random_multinomial</name>
        <param>
          <type>long long int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>probs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a vector of outcomes from a random draw of the Multinomial distribution with N trials where each trial has a vector of probabilities probs. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of trials </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">probs</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of probabilities for each outcome </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector of the number of successes for each outcome (in the same order as the probabilities). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/random.h" line="14" column="13" bodyfile="src/random.cpp" bodystart="103" bodyend="125" declfile="includes/random.h" declline="14" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="random_8h_1ae9bfea9d70562b34509b4ff50c57e117" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; long long int &gt;</type>
        <definition>std::vector&lt; long long int &gt; random_multinomial</definition>
        <argsstring>(long long int n, const std::array&lt; long long int, constants::num_gen &gt; &amp;probs)</argsstring>
        <name>random_multinomial</name>
        <param>
          <type>long long int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::array&lt; long long int, <ref refid="namespaceconstants_1aaff2693551946e51a92ed8115c3be3e5" kindref="member">constants::num_gen</ref> &gt; &amp;</type>
          <declname>probs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a vector of outcomes from a random draw of the Multinomial distribution with N trials where each trial has a vector of probabilities probs. <linebreak/>
 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of trials </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">probs</parametername>
</parameternamelist>
<parameterdescription>
<para>array of probabilities for each outcome (each genotype). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector of the number of successes for each outcome (in the same order as the probabilities). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/random.h" line="15" column="13" bodyfile="src/random.cpp" bodystart="133" bodyend="155" declfile="includes/random.h" declline="15" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="random_8h_1ab522b309a12c730ad270008709c19d09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; long long int &gt;</type>
        <definition>std::vector&lt; long long int &gt; random_multinomial</definition>
        <argsstring>(long long int n, const std::array&lt; double, constants::max_dev+1 &gt; &amp;probs)</argsstring>
        <name>random_multinomial</name>
        <param>
          <type>long long int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::array&lt; double, <ref refid="namespaceconstants_1ab5cd2d6cdf356d98576ea193f6a54476" kindref="member">constants::max_dev</ref>+1 &gt; &amp;</type>
          <declname>probs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a vector of outcomes from a random draw of the Multinomial distribution with N trials where each trial has a vector of probabilities probs. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of trials </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">probs</parametername>
</parameternamelist>
<parameterdescription>
<para>array of probabilities for each outcome (each age group) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector of the number of successes for each outcome (in the same order as the probabilities). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/random.h" line="16" column="13" bodyfile="src/random.cpp" bodystart="163" bodyend="185" declfile="includes/random.h" declline="16" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="random_8h_1ab1651a929e139f6da870eae2f0c641e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double random_lognormal</definition>
        <argsstring>(double des_mean, double des_var)</argsstring>
        <name>random_lognormal</name>
        <param>
          <type>double</type>
          <declname>des_mean</declname>
        </param>
        <param>
          <type>double</type>
          <declname>des_var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a random draw (non-negative floating-point number) from a lognormal distribution with desired mean des_mean and desired variance des_var. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">des_mean</parametername>
</parameternamelist>
<parameterdescription>
<para>desired mean </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">des_var</parametername>
</parameternamelist>
<parameterdescription>
<para>desired variance </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The random number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/random.h" line="17" column="8" bodyfile="src/random.cpp" bodystart="193" bodyend="199" declfile="includes/random.h" declline="17" declcolumn="8"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>GENERALMETAPOP_RANDOM_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GENERALMETAPOP_RANDOM_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;constants.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Random<sp/>number<sp/>generator<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>random_real();</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>random_discrete(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>random_poisson(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>random_binomial(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p);</highlight></codeline>
<codeline lineno="14"><highlight class="normal">std::vector&lt;long<sp/>long<sp/>int&gt;<sp/>random_multinomial(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;&amp;<sp/>probs);</highlight></codeline>
<codeline lineno="15"><highlight class="normal">std::vector&lt;long<sp/>long<sp/>int&gt;<sp/>random_multinomial(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;long<sp/>long<sp/>int,<sp/>constants::num_gen&gt;&amp;<sp/>probs);</highlight></codeline>
<codeline lineno="16"><highlight class="normal">std::vector&lt;long<sp/>long<sp/>int&gt;<sp/>random_multinomial(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;double,<sp/>constants::max_dev+1&gt;&amp;<sp/>probs);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>random_lognormal(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>des_mean,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>des_var);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//GENERALMETAPOP_RANDOM_H</highlight></codeline>
    </programlisting>
    <location file="includes/random.h"/>
  </compounddef>
</doxygen>
